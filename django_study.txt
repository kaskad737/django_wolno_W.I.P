Django

Создать новый проект - django-admin startproject <project-name>

----------------------------------------------------------------------------

python manage.py runserver in ./manage.py

python manage.py runserver 4000 - запустить на другом порту

----------------------------------------------------------------------------
Модель MTV в Django


MTV - Model, templates, view

Каждая самостоятельная часть сайта должна представлятся в виде своего отдельного приложения.
Они должны быть независимыми.

Как добавить новое приложение ?
python manage.py startapp <app-name>

Мы получим папку (<app-name>/) в которой будет:
 - __init__.py - приложение в джанго реализуется как пакет языка пайтон
 - так же мы имеет папку "migrations" - для хранения миграция баз данных нашего приложения
 - admin.py - это для настройки админ-панели нашего сайта (админ-панель поставляется вместе с джанго)
 - apps.py - для настройки конфигурирования текущего приложения
 - models.py - для хранения ORM модели для взаимодействия с базой данных
 - tests.py - модуль с тестирующими процедурами
 - views.py - для хранения представлений текущего приложения
 
Приложение после его создания нужно "зарегистрировать" чтобы фреймворк джанго знал о его существовании.
Для этого открываем нашу папку конфигурации (в нашем случае wolno) и там в модуле settings.py и в это файле есть коллекция которая называется "INSTALLED_APPS", у этой коллекции уже прописано несколько стандартных приложений и ниже мы можем добавить свое (наше приложение heatmap).
----------------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'heatmap',
]
----------------------------------------------------------------------------

В действительности, джанго, обращаясь к нашему пакету "heatmap" будет брать настройке в модуле apps.py из класса "HeatmapConfig"

class HeatmapConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'heatmap'

потому мы можем явно в коллекции прописать путь к нашему классу:
----------------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'heatmap.apps.HeatmapConfig',
]
----------------------------------------------------------------------------

Вот таким вот образом первое, основное приложение сайта создано.

################################################################################################
№4 Маршрутизация и функции представления

Какой должен быть наш следующий шаг ?

Давайте создадим обработчик своей собственной главной страницы.
И этот обработчик мы разместим в нашем приложении "heatmap" в модуле views.py в котором собственно и прописываются представления.

Тут мы пропишем наше представление которое будет формировать внешний вид главной страницы сайта.
Представления в джанго можно реализовать или в виде функций или в виде классов.
Делается это так:
----------------------------------------------------------------------------
from django.shortcuts import render
from django.http import HttpResponse

def index(request): # HttpRequest
    return HttpResponse("Heatmap page")
----------------------------------------------------------------------------

Через переменную request нам будет доступна вся информация о текущем запросе.
Функция представления в самом простом варианте написана.

Теперь нам надо связать эту функцию с соответствующим URL адресом.
Для этого идем в пакет конфигурации "wolno" и открываем пакет который называется urls.py
----------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path
from heatmap.views import index

urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', index), # http://127.0.0.1:8000/index/
]
----------------------------------------------------------------------------

Если мы хотим чтоб у нас существовал маршрут главной страницы - http://127.0.0.1:8000
То нам следует описать его следующим способом:
----------------------------------------------------------------------------
urlpatterns = [
    path('', index), # http://127.0.0.1:8000
]
----------------------------------------------------------------------------

Нужно оставить пустую строку и тогда функция index будет формировать главную страницу.
----------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path
from heatmap import views

urlpatterns = [
    path('admin/', admin.site.urls),
    # path('index/', views.index), # http://127.0.0.1:8000/index/
    path('', views.index), # http://127.0.0.1:8000
]
----------------------------------------------------------------------------

Пути важно прописывать со слешем - "index/", это правила хорошего тона, но можно прописывать и без слеша.

Джанго позволяет вторым параметром, вместо функции представления, прописать специальную функцию, которая называется "include" и в этой функции подключить автоматом все необходимые, например:
include('heatmap.urls')

----------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path, include
from heatmap import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('heatmap.urls')),
]
----------------------------------------------------------------------------

а в самом нашем приложении создаем модуль urls.py и там прописываем:
----------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index),
]
----------------------------------------------------------------------------

Таким образом можно маршрутизировать все пути для конкретного приложения разом 

################################################################################################
№6 Динамические URL. Пользовательские конвертеры

Параметризированные URL

----------------------------------------------------------------------------
path('info/<int:test_id>/', views.info)

view:

def info(request, test_id): # HttpRequest
    return HttpResponse(f"Heatmap page - {test_id}")

----------------------------------------------------------------------------

https://docs.djangoproject.com/en/4.2/topics/http/urls/

можно так же прописовать путь с помощью функции "re_path()" и с помощью регулярного выражения делать свои кастомные переменные в динамических путях















































































































